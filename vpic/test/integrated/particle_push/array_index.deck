#include "advance_p.h"

// Test the "normal" pusher, vs one that uses traditional ([]) array syntax and
// loop structure

begin_globals {
};

begin_initialization {
  double L  = 1e2;
  int npart = 127;
  int nstep = 100;

  define_units( 1, 1 );
  define_timestep( 1 );
  define_periodic_grid( 0, 0, 0,   // Grid low corner
                        L, L, L,   // Grid high corner
                        1, 1, 1,   // Grid resolution
                        1, 1, 1 ); // Processor configuration
  define_material( "vacuum", 1.0, 1.0, 0.0 );
  define_field_array();

  field(1,1,1).ex  = 1;
  field(1,2,1).ex  = 1;
  field(1,1,2).ex  = 1;
  field(1,2,2).ex  = 1;

  field(1,1,1).ey  = 2;
  field(1,1,2).ey  = 2;
  field(2,1,1).ey  = 2;
  field(2,1,2).ey  = 2;

  field(1,1,1).ez  = 3;
  field(2,1,1).ez  = 3;
  field(1,2,1).ez  = 3;
  field(2,2,1).ez  = 3;

  species_t * sp =
    define_species( "test_species", 1., 1., npart, npart, 0, 0 );

  species_t* sp2 =
    define_species( "test_species2", 1., 1., npart, npart, 0, 0 );

  repeat(npart)
  {
      float x = uniform( rng(0), 0, L);
      float y = uniform( rng(0), 0, L);
      float z = uniform( rng(0), 0, L);

      // Put two sets of particle in the exact same space
      inject_particle( sp2, x, y, z, 0., 0., 0., 1., 0., 0);
      inject_particle( sp , x, y, z, 0., 0., 0., 1., 0., 0);
  }

  // Create a second accumulator_array
  accumulator_array_t* accumulator_array2 = new_accumulator_array( grid );

  clear_accumulator_array(accumulator_array);
  clear_accumulator_array(accumulator_array2);

  // Hack into vpic internals
  int failed = 0;
  load_interpolator_array( interpolator_array, field_array );
  for( int n=0; n<nstep; n++ ) {

    advance_p( sp, accumulator_array, interpolator_array );
    advance_p2( sp2, accumulator_array2, interpolator_array );

    // This is how many pipelines there are inside the array
    for (int n = 0; n < accumulator_array->n_pipeline+1; n++)
    {
        accumulator_t* a = accumulator_array->a + (n * accumulator_array2->stride);
        accumulator_t* a2 = accumulator_array2->a + (n * accumulator_array2->stride);
        for (int i = 0; i < grid->nv; i++)
        {
            if (
                    (a[i].jx[0] != a2[i].jx[0]) ||
                    (a[i].jx[1] != a2[i].jx[1]) ||
                    (a[i].jx[2] != a2[i].jx[2]) ||
                    (a[i].jx[3] != a2[i].jx[3]) ||
                    (a[i].jy[0] != a2[i].jy[0]) ||
                    (a[i].jy[1] != a2[i].jy[1]) ||
                    (a[i].jy[2] != a2[i].jy[2]) ||
                    (a[i].jy[3] != a2[i].jy[3]) ||
                    (a[i].jz[0] != a2[i].jz[0]) ||
                    (a[i].jz[1] != a2[i].jz[1]) ||
                    (a[i].jz[2] != a2[i].jz[2]) ||
                    (a[i].jz[3] != a2[i].jz[3])
            )
            {
                sim_log(" Failed at " << i );
                failed++;
            }
        }
      if( failed ) { sim_log( "FAIL" ); abort(1); }
    }

    for ( int m=0; m<npart; m++ ) {
      if( sp->p[m].ux != 1*(n+1) ||
          sp->p[m].uy != 2*(n+1) ||
          sp->p[m].uz != 3*(n+1) ) {
        failed++;
        sim_log( n << " " <<
                 m << " " <<
                 sp->p[m].i  << " " <<
                 sp->p[m].dx << " " <<
                 sp->p[m].dy << " " <<
                 sp->p[m].dz << " " <<
                 sp->p[m].ux << " " <<
                 sp->p[m].uy << " " <<
                 sp->p[m].uz << " " <<
                 sp->p[m].w );
      }
    }
  }

  if( failed ) { sim_log( "FAIL" ); abort(1); }
  sim_log( "pass" );
  halt_mp();
  exit(0);
}

begin_diagnostics {
}

begin_particle_injection {
}

begin_current_injection {
}

begin_field_injection {
}

begin_particle_collisions {
}
